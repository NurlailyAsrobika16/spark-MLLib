# -*- coding: utf-8 -*-
"""KMeans(Slide_53).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eqvhaH2AWNuLAQ0lV3xyCRqz3ruUdNUz
"""

from google.colab import drive
drive.mount('/content/drive')

# Install PySpark
!pip install pyspark

# Import Library
from pyspark.sql import SparkSession
from pyspark.mllib.clustering import KMeans, KMeansModel
from numpy import array
from math import sqrt

spark = SparkSession.builder.appName("Movie Lens").getOrCreate()
sc = spark.sparkContext

# Load and parse the data
data = sc.textFile("/content/drive/MyDrive/Colab Notebooks/SPARK/kmeans_data.txt")
parsedData = data.map(lambda line: array([float(x) for x in line.split(' ')]))

# Build the model (cluster the data)
clusters = KMeans.train(parsedData, k=2, maxIterations=10, initializationMode="random")

# Evaluate clustering by computing Within Set Sum of Squared Errors
def error(point):
    center = clusters.centers[clusters.predict(point)]
    return sqrt(sum([x**2 for x in (point - center)]))

WSSSE = parsedData.map(lambda point: error(point)).reduce(lambda x, y: x + y)
print("Within Set Sum of Squared Error = " + str(WSSSE))

